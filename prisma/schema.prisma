generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String           @id @default(cuid())
  name                 String?
  email                String           @unique
  emailVerified        Boolean          @default(false)
  image                String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  firstName            String?
  lastName             String?
  phone                String?
  avatar               String?
  role                 Role             @default(CUSTOMER)
  isActive             Boolean          @default(true)
  twoFactorEnabled     Boolean          @default(false)
  twoFactorSecret      String?
  twoFactorBackupCodes String[]         @default([])
  twoFactorVerified    Boolean          @default(false)
  phoneVerified        Boolean          @default(false)
  lastLoginAt          DateTime?
  lastPasswordChange   DateTime?
  accountLocked        Boolean          @default(false)
  lockReason           String?
  preferences          Json?
  settings             Json?
  accounts             Account[]
  addresses            Address[]
  cartItems            CartItem[]
  magicLinks           MagicLink[]
  orders               Order[]
  reviews              Review[]
  sessions             Sessions[]
  twoFactorTokens      TwoFactorToken[]
  wishlist             WishlistItem[]

  @@map("user")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String   @default("credential")
  provider          String   @default("credential")
  providerAccountId String   @default("credential")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  accountId         String   @unique
  password          String?
  providerId        String   @default("credential")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Sessions {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userAgent    String?
  ipAddress    String?
  country      String?
  city         String?
  lastActivity DateTime?
  deviceType   String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtoken")
}

model MagicLink {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  userId    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("magic_link")
}

model TwoFactorToken {
  id        String             @id @default(cuid())
  userId    String
  token     String             @unique
  type      TwoFactorTokenType
  expires   DateTime
  used      Boolean            @default(false)
  createdAt DateTime           @default(now())
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_token")
}

model Address {
  id             String      @id @default(cuid())
  userId         String
  type           AddressType
  firstName      String
  lastName       String
  company        String?
  address1       String
  address2       String?
  city           String
  state          String
  postalCode     String
  country        String
  phone          String
  isDefault      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders  Order[]     @relation("BillingAddress")
  shippingOrders Order[]     @relation("ShippingAddress")

  @@map("addresses")
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Product {
  id               String             @id @default(cuid())
  name             String
  slug             String             @unique
  description      String?
  shortDescription String?
  sku              String?            @unique
  price            Decimal            @db.Decimal(10, 2)
  comparePrice     Decimal?           @db.Decimal(10, 2)
  costPrice        Decimal?           @db.Decimal(10, 2)
  quantity         Int                @default(0)
  weight           Decimal?           @db.Decimal(8, 3)
  dimensions       String?
  isActive         Boolean            @default(true)
  isFeatured       Boolean            @default(false)
  isDigital        Boolean            @default(false)
  sortOrder        Int                @default(0)
  categoryId       String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  cartItems        CartItem[]
  orderItems       OrderItem[]
  attributes       ProductAttribute[]
  images           ProductImage[]
  variants         ProductVariant[]
  category         Category           @relation(fields: [categoryId], references: [id])
  reviews          Review[]
  wishlistItems    WishlistItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  sortOrder Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  name      String
  sku       String?  @unique
  price     Decimal? @db.Decimal(10, 2)
  quantity  Int      @default(0)
  weight    Decimal? @db.Decimal(8, 3)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductAttribute {
  id        String   @id @default(cuid())
  productId String
  name      String
  value     String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_attributes")
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  orderNumber       String      @unique
  status            OrderStatus @default(PENDING)
  subtotal          Decimal     @db.Decimal(10, 2)
  taxAmount         Decimal     @default(0) @db.Decimal(10, 2)
  shippingAmount    Decimal     @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal     @default(0) @db.Decimal(10, 2)
  total             Decimal     @db.Decimal(10, 2)
  currency          String      @default("USD")
  notes             String?
  shippingAddressId String?
  billingAddressId  String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  orderItems        OrderItem[]
  billingAddress    Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  user              User        @relation(fields: [userId], references: [id])
  payments          Payment[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  productId  String
  variantId  String?
  name       String
  sku        String?
  quantity   Int
  unitPrice  Decimal  @db.Decimal(10, 2)
  totalPrice Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  gateway       String?
  metadata      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  variantId String?
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String?
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
  CRYPTO
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum TwoFactorTokenType {
  EMAIL
  SMS
  AUTHENTICATOR
}

model Jwks {
  id         String   @id @default(cuid())
  publicKey  String   @map("public_key")
  privateKey String   @map("private_key")
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("jwks")
}
